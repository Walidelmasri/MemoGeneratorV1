@model MemoGenerator.ViewModels.MemoCreateVm
@{
  ViewData["Title"] = "Create Memo PDF";
}

@section PageHeader {
  <style>.page-hero{background-image:url('@Url.Content("~/images/pic1.jpg")');}</style>
  <div class="page-hero-content"><h1 class="page-title">Create Memo PDF</h1></div>
}

<div class="with-rails">
  <div class="container py-4">
    <div class="bg-white border rounded-3 p-3 p-md-4 shadow-sm mb-4">
      <form id="memoForm" asp-controller="Memo" asp-action="Create" method="post" novalidate>
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger mb-2"></div>

        <div class="row g-3 mt-0">
          <!-- Row 1 -->
          <div class="col-md-6">
            <label class="form-label">To</label>
            <input asp-for="To" class="form-control" />
            <span asp-validation-for="To" class="text-danger" data-valmsg-for="To"></span>
          </div>
          <div class="col-md-6">
            <label class="form-label">Through / <span dir="rtl">بواسطة</span></label>
            <input asp-for="Through" class="form-control" />
            <span asp-validation-for="Through" class="text-danger" data-valmsg-for="Through"></span>
          </div>

          <!-- Row 2 -->
          <div class="col-md-6">
            <label class="form-label">From</label>
            <input asp-for="From" class="form-control" />
            <span asp-validation-for="From" class="text-danger" data-valmsg-for="From"></span>
          </div>
          <div class="col-md-6">
            <label class="form-label">Memo Type (Classification)</label>
            <select asp-for="Classification" class="form-select">
              <option value="">-- Select Type --</option>
              <option value="Confidential">Confidential</option>
              <option value="For Internal Use">For Internal Use</option>
              <option value="General">General</option>
            </select>
            <span asp-validation-for="Classification" class="text-danger" data-valmsg-for="Classification"></span>
          </div>

          <!-- Subject -->
          <div class="col-12">
            <label class="form-label">Subject</label>
            <input asp-for="Subject" class="form-control" />
            <span asp-validation-for="Subject" class="text-danger" data-valmsg-for="Subject"></span>
          </div>

          <!-- Body (Quill) -->
          <div class="col-12">
            <label class="form-label">Body</label>

            <div class="quill-wrap mb-3">
              <div id="q-toolbar" class="mb-2">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <select class="ql-align">
                  <option selected></option>
                  <option value="center"></option>
                  <option value="right"></option>
                  <option value="justify"></option>
                </select>
                <button class="ql-list" value="bullet"></button>
                <button class="ql-list" value="ordered"></button>
                <button class="ql-direction" value="rtl"></button>

                <!-- Table controls (compact; native-first; unchanged behavior) -->
                <span class="ql-formats ql-formats-table">
                  <button type="button" id="tbl-insert">▦</button>
                  <button type="button" id="tbl-row-above">↥</button>
                  <button type="button" id="tbl-row-below">↧</button>
                  <button type="button" id="tbl-col-left">↤</button>
                  <button type="button" id="tbl-col-right">↦</button>
                  <button type="button" id="tbl-merge">⇱⇲</button>
                  <button type="button" id="tbl-unmerge">⤧</button>
                  <button type="button" id="tbl-del-row">−R</button>
                  <button type="button" id="tbl-del-col">−C</button>
                  <button type="button" id="tbl-del-table">✖︎</button>
                </span>
              </div>
              <div id="q-editor"></div>
            </div>

            <!-- Hidden field MVC posts -->
            <textarea asp-for="Body" id="Body" class="d-none"></textarea>
            <span asp-validation-for="Body" class="text-danger" data-valmsg-for="Body"></span>
          </div>
        </div>

        <div class="mt-3 d-flex gap-2">
          <button type="submit" class="btn btn-primary">Generate PDF</button>
        </div>
      </form>
    </div>
  </div>
</div>

@section Scripts {
  <!-- Quill v2 -->
  <link href="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.snow.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.js"></script>

  <style>
    /* Card look (unchanged) */
    .quill-wrap .ql-toolbar.ql-snow,
    .quill-wrap .ql-container.ql-snow { border:1px solid #e5e7eb; }
    .quill-wrap .ql-toolbar.ql-snow   { border-radius:10px 10px 0 0; }
    .quill-wrap .ql-container.ql-snow {
      border-top:0; border-radius:0 0 10px 10px; min-height:320px;
    }
    .quill-wrap .ql-editor { min-height:300px; }
    .quill-wrap .ql-editor.ql-blank::before { color:#9aa3ab; }
    .is-invalid.ql-container, .quill-wrap .is-invalid { border-color:#dc3545 !important; }

    /* Show a light grid while typing in tables */
    .quill-wrap .ql-editor table { border-collapse: collapse; width:100%; }
    .quill-wrap .ql-editor td, .quill-wrap .ql-editor th {
      border:1px solid #e5e7eb; padding:6px; vertical-align:top;
    }

    /* --- NEW: normalize alignment for custom table buttons only (no logic change) --- */
    .quill-wrap .ql-toolbar .ql-formats-table button {
      display:inline-flex; align-items:center; justify-content:center;
      height:26px; min-width:26px; line-height:26px; padding:0 8px;
      border:1px solid transparent; border-radius:3px; background:transparent;
      font-size:13px; vertical-align:middle; cursor:pointer;
    }
    /* Keep spacing consistent with Quill’s icon groups */
    .quill-wrap .ql-toolbar .ql-formats-table { display:inline-flex; gap:6px; vertical-align:middle; }
    /* Focus & hover (match Snow theme feel) */
    .quill-wrap .ql-toolbar .ql-formats-table button:hover { background:#f3f4f6; }
    .quill-wrap .ql-toolbar .ql-formats-table button:active { background:#e5e7eb; }
  </style>

  <script>
    // Init Quill (v2)
    const quill = new Quill('#q-editor', {
      theme: 'snow',
      placeholder: 'Write the memo body here…',
      modules: { toolbar: '#q-toolbar', table: true }
    });

    // Hidden textarea (what MVC posts)
    const bodyField = document.getElementById('Body');
    if (bodyField.value) quill.clipboard.dangerouslyPasteHTML(bodyField.value);

    // Normalize Quill output (keep tables intact)
    function normalizeQuillHtml(html){
      const wrap = document.createElement('div');
      wrap.innerHTML = html;

      wrap.querySelectorAll('.ql-align-center, .ql-align-right, .ql-align-justify').forEach(el=>{
        if (el.classList.contains('ql-align-center'))  el.style.textAlign='center';
        if (el.classList.contains('ql-align-right'))   el.style.textAlign='right';
        if (el.classList.contains('ql-align-justify')) el.style.textAlign='justify';
        el.classList.remove('ql-align-center','ql-align-right','ql-align-justify');
      });

      wrap.querySelectorAll('.ql-direction-rtl').forEach(el=>{
        if (!el.style.textAlign) el.style.textAlign='right';
        el.classList.remove('ql-direction-rtl');
      });

      return wrap.innerHTML;
    }

    // -------- Table helpers (unchanged behavior) --------
    const tableMod = quill.getModule && quill.getModule('table');
    const has = name => tableMod && typeof tableMod[name] === 'function';

    function promptSize(){
      const r = parseInt(prompt('Rows?', '3'), 10);
      const c = parseInt(prompt('Columns?', '3'), 10);
      if (!Number.isFinite(r) || r<=0 || !Number.isFinite(c) || c<=0) return null;
      return { r, c };
    }

    function fallbackInsertTable(rows, cols){
      let html = '<table><tbody>';
      for (let i=0;i<rows;i++){
        html += '<tr>';
        for (let j=0;j<cols;j++){ html += '<td><br></td>'; }
        html += '</tr>';
      }
      html += '</tbody></table><p><br></p>';
      const range = quill.getSelection(true) || { index: quill.getLength(), length: 0 };
      quill.clipboard.dangerouslyPasteHTML(range.index, html, 'user');
    }

    document.getElementById('tbl-insert').addEventListener('click', ()=>{
      const size = promptSize(); if (!size) return;
      if (has('insertTable')) tableMod.insertTable(size.r, size.c); else fallbackInsertTable(size.r, size.c);
    });
    document.getElementById('tbl-row-above').addEventListener('click', ()=> has('insertRowAbove')  && tableMod.insertRowAbove());
    document.getElementById('tbl-row-below').addEventListener('click', ()=> has('insertRowBelow')  && tableMod.insertRowBelow());
    document.getElementById('tbl-col-left').addEventListener('click',  ()=> has('insertColumnLeft')  && tableMod.insertColumnLeft());
    document.getElementById('tbl-col-right').addEventListener('click', ()=> has('insertColumnRight') && tableMod.insertColumnRight());
    document.getElementById('tbl-merge').addEventListener('click',     ()=> has('mergeCells')      && tableMod.mergeCells());
    document.getElementById('tbl-unmerge').addEventListener('click',   ()=> has('unmergeCells')    && tableMod.unmergeCells());
    document.getElementById('tbl-del-row').addEventListener('click',   ()=> has('deleteRow')       && tableMod.deleteRow());
    document.getElementById('tbl-del-col').addEventListener('click',   ()=> has('deleteColumn')    && tableMod.deleteColumn());
    document.getElementById('tbl-del-table').addEventListener('click', ()=> has('deleteTable')     && tableMod.deleteTable());

    // -------- NEW: Tooltips for EVERY control (stock + custom) --------
    (function addTitles(){
      const pairs = [
        ['.ql-bold', 'Bold'],
        ['.ql-italic', 'Italic'],
        ['.ql-underline', 'Underline'],
        ['.ql-align', 'Alignment'],
        ['.ql-list[value="bullet"]', 'Bulleted list'],
        ['.ql-list[value="ordered"]', 'Numbered list'],
        ['.ql-direction[value="rtl"]', 'Right-to-left paragraph'],

        ['#tbl-insert', 'Insert table (choose rows × columns)'],
        ['#tbl-row-above', 'Insert row above'],
        ['#tbl-row-below', 'Insert row below'],
        ['#tbl-col-left', 'Insert column left'],
        ['#tbl-col-right', 'Insert column right'],
        ['#tbl-merge', 'Merge selected cells'],
        ['#tbl-unmerge', 'Unmerge cells'],
        ['#tbl-del-row', 'Delete current row'],
        ['#tbl-del-col', 'Delete current column'],
        ['#tbl-del-table', 'Delete table']
      ];
      pairs.forEach(([sel, title])=>{
        const el = document.querySelector('#q-toolbar ' + sel);
        if (el) el.setAttribute('title', title);
      });
      // Optional: titles for align options
      const alignSel = document.querySelector('#q-toolbar .ql-align');
      if (alignSel) alignSel.setAttribute('title','Alignment (left / center / right / justify)');
    })();

    // -------- Client-side required checks (unchanged) --------
    (function(){
      const form  = document.getElementById('memoForm');
      const qRoot = document.getElementById('q-editor');
      const msgSpan = name => document.querySelector('[data-valmsg-for="'+name+'"]');
      const byName  = name => document.querySelector('[name="'+name+'"]');

      function setErr(inputEl, spanEl, msg){
        if (inputEl) inputEl.classList.add('is-invalid');
        if (spanEl){ spanEl.textContent = msg; spanEl.classList.add('d-block'); }
      }
      function clearErr(inputEl, spanEl){
        if (inputEl) inputEl.classList.remove('is-invalid');
        if (spanEl){ spanEl.textContent = ''; spanEl.classList.remove('d-block'); }
      }

      form.addEventListener('submit', function(e){
        bodyField.value = normalizeQuillHtml(quill.root.innerHTML);

        let errors = 0;
        const toEl    = byName('To');
        const fromEl  = byName('From');
        const subEl   = byName('Subject');
        const clsEl   = byName('Classification');
        const bodyTxt = quill.getText().replace(/\s+/g,'').trim();

        clearErr(toEl,   msgSpan('To'));
        clearErr(fromEl, msgSpan('From'));
        clearErr(subEl,  msgSpan('Subject'));
        clearErr(clsEl,  msgSpan('Classification'));
        qRoot.classList.remove('is-invalid'); clearErr(null, msgSpan('Body'));

        if (!toEl.value.trim())   { setErr(toEl,   msgSpan('To'),            'Required'); errors++; }
        if (!fromEl.value.trim()) { setErr(fromEl, msgSpan('From'),          'Required'); errors++; }
        if (!subEl.value.trim())  { setErr(subEl,  msgSpan('Subject'),       'Required'); errors++; }
        if (!clsEl.value.trim())  { setErr(clsEl,  msgSpan('Classification'),'Required'); errors++; }
        if (!bodyTxt.length)      { qRoot.classList.add('is-invalid'); setErr(null, msgSpan('Body'), 'Body cannot be empty'); errors++; }

        if (errors){
          e.preventDefault();
          e.stopPropagation();
          (form.querySelector('.is-invalid') || form).scrollIntoView({ behavior:'smooth', block:'center' });
        }
      });
    })();
  </script>
}
